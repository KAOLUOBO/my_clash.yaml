parsers: # array
  - reg: ^.*$
    # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
    # 下面是删除服务商自带的策略组和规则
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
        const groups = []
        const rules = []
        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules })
      }
    # 建立自己的配置
    yaml:
      prepend-proxy-groups: # 建立策略组
        - name: 🔯 代理模式
          type: select
          proxies:
            - 🌚黑名单(GFWlist)-DIRECT # 黑名单模式，意为「只有命中规则的网络流量，才使用代理」
            - 🌕白名单(Whitelist)-PROXY # 白名单模式，意为「没有命中规则的网络流量，统统使用代理」

        - name: 🌚黑名单(GFWlist)-DIRECT
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - DIRECT

        - name: 🌕白名单(Whitelist)-PROXY
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 86400
          proxies:
            - PROXY
        - name: PROXY
          type: fallback
          url: http://www.google.com/generate_204
          interval: 300
          proxies:
            - 🇭🇰香港
            - 🇨🇳台湾
            - 🇸🇬新加坡
            - 🇺🇸美国
            - 🇯🇵日本
            - 🇰🇷韩国
            - 🏳️其他

        # - name: Netflix
        #   type: select
        #   proxies:
        #     - 🇭🇰香港
        #     - 🇨🇳台湾
        #     - 🇯🇵日本
        #     - 🇸🇬新加坡
        #     - 🇰🇷韩国
        #     - 🇺🇸美国
        - name: 🎬 Bilibili
          type: select
          proxies:
            - DIRECT
            # - 🇭🇰香港
            # - 🇨🇳台湾
            # - 🇯🇵日本
            # - 🇸🇬新加坡
            # - 🇰🇷韩国
            # - 🇺🇸美国

        - name: 🎬 YouTube
          type: select
          proxies:
            - PROXY
            - 🇭🇰香港
            - 🇨🇳台湾
            - 🇯🇵日本
            - 🇸🇬新加坡
            - 🇰🇷韩国
            - 🇺🇸美国

        - name: 🛑 广告拦截
          type: select
          proxies:
            - DIRECT
            - REJECT
            - PROXY

        # - name: 🐟 漏网之鱼
        #   type: select
        #   proxies:
        #     - DIRECT
        #     - PROXY

        - name: 🇭🇰香港
          type: url-test
          url: http://www.google.com/generate_204
          interval: 300

        - name: 🇨🇳台湾
          type: url-test
          url: http://www.google.com/generate_204
          interval: 300

        - name: 🇯🇵日本
          type: url-test
          url: http://www.google.com/generate_204
          interval: 300

        - name: 🇸🇬新加坡
          type: url-test
          url: http://www.google.com/generate_204
          interval: 300

        - name: 🇰🇷韩国
          type: url-test
          url: http://www.google.com/generate_204
          interval: 300

        - name: 🇺🇸美国
          type: url-test
          url: http://www.google.com/generate_204
          interval: 300

        - name: 🏳️其他
          type: select
          url: http://www.google.com/generate_204
          interval: 300

      # 策略组示例
      # - name: 分组名
      # type: select       # 手动选点
      # url-test     # 自动选择延迟最低的节点
      # fallback     # 节点故障时自动切换下一个
      # laod-balance # 均衡使用分组内的节点
      # url: http://www.gstatic.com/generate_204 # 测试地址 非select类型分组必要
      # interval: 300 # 自动测试间隔时间，单位秒 非select类型分组必要
      # tolerance: 50 # 允许的偏差，节点之间延迟差小于该值不切换 非必要
      # proxies:
      # - 节点名称或其他分组套娃
      commands:
        # - proxy-groups.Netflix.proxies=[]proxyNames|奈飞|nf|解锁
        - proxy-groups.🇭🇰香港.proxies=[]proxyNames|^((?!Premium).)*Hong((?!Premium).)*$ # 向指定策略组添加订阅中的节点名，可使用正则过滤
        - proxy-groups.🇨🇳台湾.proxies=[]proxyNames|^((?!Premium).)*Taiwan((?!Premium).)*$
        - proxy-groups.🇯🇵日本.proxies=[]proxyNames|^((?!Premium).)*Japan((?!Premium).)*$
        - proxy-groups.🇰🇷韩国.proxies=[]proxyNames|^((?!Premium).)*Korea((?!Premium).)*$
        - proxy-groups.🇸🇬新加坡.proxies=[]proxyNames|^((?!Premium).)*Singapore((?!Premium).)*$
        - proxy-groups.🇺🇸美国.proxies=[]proxyNames|^((?!Premium).)*USA((?!Premium).)*$
        - proxy-groups.🏳️其他.proxies=[]proxyNames|^(?!.*(Hong|Japan|Taiwan|Korea|Singapore|USA)).*$ # 这个可以自定义，这个正则的意思是排除节点名字有“香日台新韩美”的节点。


          # - proxy-groups.节点名字.proxies.0+DIRECT # 向指定分组第一个位置添加一个 DIRECT 节点名
        # - proxy-groups.Netflix.proxies.0+DIRECT
        # - proxy-groups.🇭🇰香港.proxies.0+DIRECT
        # - proxy-groups.🇨🇳台湾.proxies.0+DIRECT
        # - proxy-groups.🇯🇵日本.proxies.0+DIRECT
        # - proxy-groups.🇰🇷韩国.proxies.0+DIRECT
        # - proxy-groups.🇸🇬新加坡.proxies.0+DIRECT
        # - proxy-groups.🇺🇸美国.proxies.0+DIRECT
        # - proxy-groups.🏳️其他.proxies.0+DIRECT

        # 一些可能用到的正则过滤节点示例，使分组更细致
        # []proxyNames|a                         # 包含a
        # []proxyNames|^(.*)(a|b)+(.*)$          # 包含a或b
        # []proxyNames|^(?=.*a)(?=.*b).*$        # 包含a和b
        # []proxyNames|^((?!b).)*a((?!b).)*$     # 包含a且不包含b
        # []proxyNames|^((?!b|c).)*a((?!b|c).)*$ # 包含a且不包含b或c
        # 更多正则教程，请看这里：https://deerchao.cn/tutorials/regex/regex.htm#top
      # 添加规则
      prepend-rules: # 规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - DOMAIN,gstatic.com,DIRECT
        - RULE-SET,applications,DIRECT
        # 这些是自定义规则，想要的可以继续加。
        - DOMAIN,clash.razord.top,DIRECT
        - DOMAIN,yacd.haishan.me,DIRECT
        # steam规则
        - DOMAIN,content1.steampowered.com,DIRECT
        - DOMAIN,content2.steampowered.com,DIRECT
        - DOMAIN,content3.steampowered.com,DIRECT
        - DOMAIN,content4.steampowered.com,DIRECT
        - DOMAIN,content5.steampowered.com,DIRECT
        - DOMAIN,content6.steampowered.com,DIRECT
        - DOMAIN,content7.steampowered.com,DIRECT
        - DOMAIN,content8.steampowered.com,DIRECT
        - DOMAIN,client-download.steampowered.com,DIRECT
        - DOMAIN,content-origin.steampowered.com,DIRECT
        - DOMAIN,clientconfig.akamai.steamtransparent.com,DIRECT
        - DOMAIN,steampipe.akamaized.net,DIRECT
        - DOMAIN,steam.apac.qtlglb.com.mwcloudcdn.com,DIRECT
        - DOMAIN,cdn1-sea1.valve.net,DIRECT
        - DOMAIN,cdn2-sea1.valve.net,DIRECT
        - DOMAIN,steam.apac.qtlglb.com,DIRECT
        - DOMAIN,edge.steam-dns.top.comcast.net,DIRECT
        - DOMAIN,edge.steam-dns-2.top.comcast.net,DIRECT
        - DOMAIN,steam.naeu.qtlglb.com,DIRECT
        - DOMAIN,steampipe-kr.akamaized.net,DIRECT
        - DOMAIN,steam.ix.asn.au,DIRECT
        - DOMAIN,steam.eca.qtlglb.com,DIRECT
        - DOMAIN,steam.cdn.on.net,DIRECT
        - DOMAIN,update5.dota2.wmsj.cn,DIRECT
        - DOMAIN,update2.dota2.wmsj.cn,DIRECT
        - DOMAIN,update6.dota2.wmsj.cn,DIRECT
        - DOMAIN,update3.dota2.wmsj.cn,DIRECT
        - DOMAIN,update1.dota2.wmsj.cn,DIRECT
        - DOMAIN,update4.dota2.wmsj.cn,DIRECT
        - DOMAIN,update5.csgo.wmsj.cn,DIRECT
        - DOMAIN,update2.csgo.wmsj.cn,DIRECT
        - DOMAIN,update4.csgo.wmsj.cn,DIRECT
        - DOMAIN,update3.csgo.wmsj.cn,DIRECT
        - DOMAIN,update6.csgo.wmsj.cn,DIRECT
        - DOMAIN,update1.csgo.wmsj.cn,DIRECT
        - DOMAIN,st.dl.bscstorage.net,DIRECT
        - DOMAIN,cdn.mileweb.cs.steampowered.com.8686c.com,DIRECT
        - DOMAIN,steamcdn-a.akamaihd.net,DIRECT
        - DOMAIN-SUFFIX,content.steampowered.com,DIRECT
        - DOMAIN-SUFFIX,hsar.steampowered.com.edgesuite.net,DIRECT
        - DOMAIN-SUFFIX,akamai.steamstatic.com,DIRECT
        - DOMAIN-SUFFIX,cs.steampowered.com,DIRECT
        - DOMAIN-SUFFIX,cm.steampowered.com,DIRECT
        - DOMAIN-SUFFIX,edgecast.steamstatic.com,DIRECT
        - DOMAIN-SUFFIX,steamcontent.com,DIRECT
        - DOMAIN-SUFFIX,steam-content-dnld-1.apac-1-cdn.cqloud.com,DIRECT
        - DOMAIN-SUFFIX,steam-content-dnld-1.eu-c1-cdn.cqloud.com,DIRECT
        - DOMAIN-SUFFIX,steam-content-dnld-1.qwilted-cds.cqloud.com,DIRECT
        # 下面的规则是通过mix-rule-providers来确定的
        - RULE-SET,private,DIRECT
        - RULE-SET,reject,🛑 广告拦截
        - RULE-SET,bilibili,🎬 Bilibili
        - RULE-SET,youTube,🎬 YouTube
        # - RULE-SET,netflix,Netflix
        - RULE-SET,icloud,DIRECT #
        - RULE-SET,apple,DIRECT # 这三个为国内可直连地址，如果希望走代理改为PROXY
        - RULE-SET,google,PROXY #
        - RULE-SET,tld-not-cn,PROXY
        - RULE-SET,gfw,PROXY
        - RULE-SET,greatfire,PROXY
        - RULE-SET,telegramcidr,PROXY
        - RULE-SET,lancidr,DIRECT
        - RULE-SET,cncidr,DIRECT
        - GEOIP,LAN,DIRECT
        - GEOIP,CN,DIRECT
        - RULE-SET,direct,DIRECT
        - RULE-SET,proxy,🔯 代理模式
        - MATCH,🔯 代理模式 # 规则之外的

      # 添加规则集
      mix-rule-providers:
        reject: # 广告域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
          path: ./ruleset/reject.yaml
          interval: 86400

        icloud: # iCloud 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
          path: ./ruleset/icloud.yaml
          interval: 86400

        bilibili: # bilibili 域名列表
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.yaml"
          path: ./ruleset/bilibili.yaml
          interval: 86400

        youTube: # youTube 域名列表
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml"
          path: ./ruleset/youTube.yaml
          interval: 86400

        apple: # Apple 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
          path: ./ruleset/apple.yaml
          interval: 86400

        google: # Google 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"
          path: ./ruleset/google.yaml
          interval: 86400

        proxy: # 代理域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
          path: ./ruleset/proxy.yaml
          interval: 86400

        direct: # 直连域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
          path: ./ruleset/direct.yaml
          interval: 86400

        private: # 私有网络专用域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
          path: ./ruleset/private.yaml
          interval: 86400

        gfw: # GFWList 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
          path: ./ruleset/gfw.yaml
          interval: 86400

        greatfire: # GreatFire 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt"
          path: ./ruleset/greatfire.yaml
          interval: 86400

        tld-not-cn: # 非中国大陆使用的顶级域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
          path: ./ruleset/tld-not-cn.yaml
          interval: 86400

        telegramcidr: # Telegram 使用的 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
          path: ./ruleset/telegramcidr.yaml
          interval: 86400

        cncidr: # 中国大陆 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
          path: ./ruleset/cncidr.yaml
          interval: 86400

        lancidr: # 局域网 IP 及保留 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
          path: ./ruleset/lancidr.yaml
          interval: 86400

        applications: # 需要直连的常见软件列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
          path: ./ruleset/applications.yaml
          interval: 86400

        netflix: # 奈飞的分流规则
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/release/rule/Clash/Netflix/Netflix.yaml"
          path: ./ruleset/netflix.yaml
          interval: 86400
